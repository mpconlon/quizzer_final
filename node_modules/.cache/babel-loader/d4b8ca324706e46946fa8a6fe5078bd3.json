{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matth\\\\quizzer_start\\\\src\\\\form-components\\\\EditMode.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EditMode() {\n  _s();\n\n  const [inEditMode, setInEditMode] = useState(false);\n  const [isStudent, setIsStudent] = useState(true);\n  const [name, setName] = useState(\"Your Name\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Edit Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !inEditMode && isStudent ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [name, \" is a Student.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }, this) : !inEditMode && !isStudent ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [name, \" is not a Student.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Form.Check, {\n        inline: true,\n        type: \"switch\",\n        id: \"in-edit-mode-switch\",\n        label: \"Edit Mode\",\n        checked: inEditMode,\n        onChange: event => setInEditMode(event.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: inEditMode ? /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formName\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Your Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          value: name,\n          onChange: event => setName(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: inEditMode ? /*#__PURE__*/_jsxDEV(Form.Check, {\n        inline: true,\n        type: \"checkbox\",\n        id: \"is-student-check\",\n        label: \"Student Check\",\n        checked: isStudent,\n        onChange: event => setIsStudent(event.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditMode, \"ibgwjp0sDH1ulfgRJx/UFyuQgk0=\");\n\n_c = EditMode;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMode\");","map":{"version":3,"sources":["C:/Users/matth/quizzer_start/src/form-components/EditMode.tsx"],"names":["React","useState","Form","EditMode","inEditMode","setInEditMode","isStudent","setIsStudent","name","setName","event","target","checked","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,OAAO,SAASC,QAAT,GAAiC;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAU,KAAV,CAA5C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAU,IAAV,CAA1C;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAS,WAAT,CAAhC;AAEA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBACK,CAACG,UAAD,IAAeE,SAAf,gBACG;AAAA,mBAAOE,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,GAEG,CAACJ,UAAD,IAAe,CAACE,SAAhB,gBACA;AAAA,mBAAOE,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,gBAGA;AAAA;AAAA;AAAA;AAAA;AANR;AAAA;AAAA;AAAA;AAAA,YAFJ,eAWI;AAAA,6BACI,QAAC,IAAD,CAAM,KAAN;AACI,QAAA,MAAM,MADV;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,EAAE,EAAC,qBAHP;AAII,QAAA,KAAK,EAAC,WAJV;AAKI,QAAA,OAAO,EAAEJ,UALb;AAMI,QAAA,QAAQ,EAAGM,KAAD,IACNL,aAAa,CAACK,KAAK,CAACC,MAAN,CAAaC,OAAd;AAPrB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAXJ,eAuBI;AAAA,gBACKR,UAAU,gBACP,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,UAAtB;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AACI,UAAA,KAAK,EAAEI,IADX;AAEI,UAAA,QAAQ,EACJE,KADM,IAELD,OAAO,CAACC,KAAK,CAACC,MAAN,CAAaE,KAAd;AAJhB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADO,gBAWP;AAAA;AAAA;AAAA;AAAA;AAZR;AAAA;AAAA;AAAA;AAAA,YAvBJ,eAsCI;AAAA,gBACKT,UAAU,gBACP,QAAC,IAAD,CAAM,KAAN;AACI,QAAA,MAAM,MADV;AAEI,QAAA,IAAI,EAAC,UAFT;AAGI,QAAA,EAAE,EAAC,kBAHP;AAII,QAAA,KAAK,EAAC,eAJV;AAKI,QAAA,OAAO,EAAEE,SALb;AAMI,QAAA,QAAQ,EACJI,KADM,IAELH,YAAY,CAACG,KAAK,CAACC,MAAN,CAAaC,OAAd;AARrB;AAAA;AAAA;AAAA;AAAA,cADO,gBAYP;AAAA;AAAA;AAAA;AAAA;AAbR;AAAA;AAAA;AAAA;AAAA,YAtCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyDH;;GA9DeT,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nexport function EditMode(): JSX.Element {\r\n    const [inEditMode, setInEditMode] = useState<boolean>(false);\r\n    const [isStudent, setIsStudent] = useState<boolean>(true);\r\n    const [name, setName] = useState<string>(\"Your Name\");\r\n\r\n    return (\r\n        <div>\r\n            <h3>Edit Mode</h3>\r\n            <div>\r\n                {!inEditMode && isStudent ? (\r\n                    <span>{name} is a Student.</span>\r\n                ) : !inEditMode && !isStudent ? (\r\n                    <span>{name} is not a Student.</span>\r\n                ) : (\r\n                    <span></span>\r\n                )}\r\n            </div>\r\n            <div>\r\n                <Form.Check\r\n                    inline\r\n                    type=\"switch\"\r\n                    id=\"in-edit-mode-switch\"\r\n                    label=\"Edit Mode\"\r\n                    checked={inEditMode}\r\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                        setInEditMode(event.target.checked)\r\n                    }\r\n                />\r\n            </div>\r\n            <div>\r\n                {inEditMode ? (\r\n                    <Form.Group controlId=\"formName\">\r\n                        <Form.Label>Your Name:</Form.Label>\r\n                        <Form.Control\r\n                            value={name}\r\n                            onChange={(\r\n                                event: React.ChangeEvent<HTMLInputElement>\r\n                            ) => setName(event.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n                ) : (\r\n                    <span></span>\r\n                )}\r\n            </div>\r\n            <div>\r\n                {inEditMode ? (\r\n                    <Form.Check\r\n                        inline\r\n                        type=\"checkbox\"\r\n                        id=\"is-student-check\"\r\n                        label=\"Student Check\"\r\n                        checked={isStudent}\r\n                        onChange={(\r\n                            event: React.ChangeEvent<HTMLInputElement>\r\n                        ) => setIsStudent(event.target.checked)}\r\n                    />\r\n                ) : (\r\n                    <span></span>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}