{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matth\\\\quizzer_start\\\\src\\\\quizzer\\\\QuizEdit.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { QuestionEdit } from \"./QuestionEdit\";\nimport \"./QuizEdit.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuizEdit = _ref => {\n  _s();\n\n  let {\n    quiz,\n    editQuiz,\n    deleteQuiz,\n    switchEdit,\n    resetView\n  } = _ref;\n  const [newQuiz, setNewQuiz] = useState({ ...quiz\n  });\n\n  const editQuestion = (questionId, newQuestion) => {\n    setNewQuiz({ ...newQuiz,\n      questionList: newQuiz.questionList.map(question => question.id === questionId ? newQuestion : question)\n    });\n  };\n\n  const removeQuestion = questionId => {\n    setNewQuiz({ ...newQuiz,\n      questionList: newQuiz.questionList.filter(question => question.id !== questionId)\n    });\n  };\n\n  const saveChanges = () => {\n    editQuiz(quiz.id, { ...newQuiz\n    });\n  };\n\n  const swapQuestion = (idx1, idx2) => {\n    setNewQuiz({ ...newQuiz,\n      questionList: newQuiz.questionList.map((q, idx) => {\n        if (idx === idx1) return newQuiz.questionList[idx2];\n        if (idx === idx2) return newQuiz.questionList[idx1];\n        return q;\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit_header\",\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formEditQuizId\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title_published_flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"edit_title_area\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Title: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              value: newQuiz.title,\n              onChange: e => setNewQuiz({ ...newQuiz,\n                title: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            className: \"published_check\",\n            type: \"checkbox\",\n            id: \"is-published_check\",\n            label: \"Quiz Published\",\n            \"data-testid\": \"Quiz Published\",\n            checked: newQuiz.published,\n            onChange: e => {\n              setNewQuiz({ ...newQuiz,\n                published: e.target.checked\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          rows: 3,\n          value: newQuiz.body,\n          onChange: e => setNewQuiz({ ...newQuiz,\n            body: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: newQuiz.questionList.map((q, index) => /*#__PURE__*/_jsxDEV(QuestionEdit, {\n        index: index,\n        lastIndex: newQuiz.questionList.length - 1,\n        question: q,\n        editQuestion: editQuestion,\n        removeQuestion: removeQuestion,\n        swapQuestion: swapQuestion\n      }, newQuiz.id + \"|\" + q.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"add_question_button\",\n        onClick: () => {\n          setNewQuiz({ ...newQuiz,\n            questionList: [...newQuiz.questionList, {\n              id: newQuiz.questionList.length,\n              body: \"Example Question\",\n              type: \"short_answer_question\",\n              options: [],\n              submission: \"\",\n              expected: \"Example Answer\",\n              points: 1,\n              published: false\n            }]\n          });\n        },\n        children: \"Add Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit_footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            className: \"save_edit_btn\",\n            onClick: () => {\n              saveChanges();\n              switchEdit();\n            },\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"warning\",\n            onClick: switchEdit,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: () => {\n            deleteQuiz(quiz.id);\n            resetView();\n          },\n          children: \"Delete Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuizEdit, \"M88G0IYp1CY1+xuMciJ16c6dmZU=\");\n\n_c = QuizEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizEdit\");","map":{"version":3,"sources":["C:/Users/matth/quizzer_start/src/quizzer/QuizEdit.tsx"],"names":["React","useState","Button","Form","QuestionEdit","QuizEdit","quiz","editQuiz","deleteQuiz","switchEdit","resetView","newQuiz","setNewQuiz","editQuestion","questionId","newQuestion","questionList","map","question","id","removeQuestion","filter","saveChanges","swapQuestion","idx1","idx2","q","idx","title","e","target","value","published","checked","body","index","length","type","options","submission","expected","points"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport { Question } from \"./question\";\r\nimport { Quiz } from \"./quiz\";\r\nimport { QuestionEdit } from \"./QuestionEdit\";\r\n\r\nimport \"./QuizEdit.css\";\r\n\r\nexport const QuizEdit = ({\r\n    quiz,\r\n    editQuiz,\r\n    deleteQuiz,\r\n    switchEdit,\r\n    resetView\r\n}: {\r\n    quiz: Quiz;\r\n    editQuiz: (questionId: number, newQuiz: Quiz) => void;\r\n    deleteQuiz: (questionId: number) => void;\r\n    switchEdit: () => void;\r\n    resetView: () => void;\r\n}) => {\r\n    const [newQuiz, setNewQuiz] = useState<Quiz>({ ...quiz });\r\n\r\n    const editQuestion = (questionId: number, newQuestion: Question) => {\r\n        setNewQuiz({\r\n            ...newQuiz,\r\n            questionList: newQuiz.questionList.map(\r\n                (question: Question): Question =>\r\n                    question.id === questionId ? newQuestion : question\r\n            )\r\n        });\r\n    };\r\n\r\n    const removeQuestion = (questionId: number) => {\r\n        setNewQuiz({\r\n            ...newQuiz,\r\n            questionList: newQuiz.questionList.filter(\r\n                (question: Question): boolean => question.id !== questionId\r\n            )\r\n        });\r\n    };\r\n\r\n    const saveChanges = () => {\r\n        editQuiz(quiz.id, { ...newQuiz });\r\n    };\r\n\r\n    const swapQuestion = (idx1: number, idx2: number) => {\r\n        setNewQuiz({\r\n            ...newQuiz,\r\n            questionList: newQuiz.questionList.map(\r\n                (q: Question, idx: number): Question => {\r\n                    if (idx === idx1) return newQuiz.questionList[idx2];\r\n                    if (idx === idx2) return newQuiz.questionList[idx1];\r\n                    return q;\r\n                }\r\n            )\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"edit_header\">\r\n                <Form.Group controlId=\"formEditQuizId\">\r\n                    <div className=\"title_published_flex\">\r\n                        <div className=\"edit_title_area\">\r\n                            <Form.Label>Title: </Form.Label>\r\n                            <Form.Control\r\n                                value={newQuiz.title}\r\n                                onChange={(\r\n                                    e: React.ChangeEvent<HTMLInputElement>\r\n                                ) =>\r\n                                    setNewQuiz({\r\n                                        ...newQuiz,\r\n                                        title: e.target.value\r\n                                    })\r\n                                }\r\n                            ></Form.Control>\r\n                        </div>\r\n                        <Form.Check\r\n                            className=\"published_check\"\r\n                            type=\"checkbox\"\r\n                            id=\"is-published_check\"\r\n                            label=\"Quiz Published\"\r\n                            data-testid=\"Quiz Published\"\r\n                            checked={newQuiz.published}\r\n                            onChange={(\r\n                                e: React.ChangeEvent<HTMLInputElement>\r\n                            ) => {\r\n                                setNewQuiz({\r\n                                    ...newQuiz,\r\n                                    published: e.target.checked\r\n                                });\r\n                            }}\r\n                        ></Form.Check>\r\n                    </div>\r\n                    <Form.Label>Description: </Form.Label>\r\n                    <Form.Control\r\n                        as=\"textarea\"\r\n                        rows={3}\r\n                        value={newQuiz.body}\r\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                            setNewQuiz({ ...newQuiz, body: e.target.value })\r\n                        }\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n            </div>\r\n\r\n            <div>\r\n                {newQuiz.questionList.map((q: Question, index: number) => (\r\n                    <QuestionEdit\r\n                        key={newQuiz.id + \"|\" + q.id}\r\n                        index={index}\r\n                        lastIndex={newQuiz.questionList.length - 1}\r\n                        question={q}\r\n                        editQuestion={editQuestion}\r\n                        removeQuestion={removeQuestion}\r\n                        swapQuestion={swapQuestion}\r\n                    ></QuestionEdit>\r\n                ))}\r\n            </div>\r\n            <hr />\r\n            <div>\r\n                <Button\r\n                    className=\"add_question_button\"\r\n                    onClick={() => {\r\n                        setNewQuiz({\r\n                            ...newQuiz,\r\n                            questionList: [\r\n                                ...newQuiz.questionList,\r\n                                {\r\n                                    id: newQuiz.questionList.length,\r\n                                    body: \"Example Question\",\r\n                                    type: \"short_answer_question\",\r\n                                    options: [],\r\n                                    submission: \"\",\r\n                                    expected: \"Example Answer\",\r\n                                    points: 1,\r\n                                    published: false\r\n                                }\r\n                            ]\r\n                        });\r\n                    }}\r\n                >\r\n                    Add Question\r\n                </Button>\r\n                <div className=\"edit_footer\">\r\n                    <div>\r\n                        <Button\r\n                            variant=\"success\"\r\n                            className=\"save_edit_btn\"\r\n                            onClick={() => {\r\n                                saveChanges();\r\n                                switchEdit();\r\n                            }}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button variant=\"warning\" onClick={switchEdit}>\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                    <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => {\r\n                            deleteQuiz(quiz.id);\r\n                            resetView();\r\n                        }}\r\n                    >\r\n                        Delete Quiz\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}