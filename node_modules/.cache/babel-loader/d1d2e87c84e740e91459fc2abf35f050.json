{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matth\\\\quizzer_start\\\\src\\\\form-components\\\\GiveAttempts.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GiveAttempts() {\n  _s();\n\n  const [attemptsLeft, setAttemptsLeft] = useState(3);\n  const [attemptsRequested, setAttemptsRequested] = useState(NaN);\n\n  function changeAttemptsRequested(event) {\n    const numRequested = parseInt(event.target.value);\n    Number.isNaN(numRequested) ? setAttemptsRequested(0) : setAttemptsRequested(numRequested);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Give Attempts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Attempts Left: \", attemptsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formAttemptsRequested\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\"How Many Attempts Would You Like?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          value: attemptsRequested,\n          onChange: changeAttemptsRequested\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setAttemptsLeft(attemptsLeft - 1),\n        disabled: attemptsLeft === 0 ? true : false,\n        children: \"use\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setAttemptsLeft(attemptsLeft + attemptsRequested),\n        children: \"gain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GiveAttempts, \"48JHKB/jOOfuOQjFQ77UdM3Cd+4=\");\n\n_c = GiveAttempts;\n\nvar _c;\n\n$RefreshReg$(_c, \"GiveAttempts\");","map":{"version":3,"sources":["C:/Users/matth/quizzer_start/src/form-components/GiveAttempts.tsx"],"names":["React","useState","Button","Form","GiveAttempts","attemptsLeft","setAttemptsLeft","attemptsRequested","setAttemptsRequested","NaN","changeAttemptsRequested","event","numRequested","parseInt","target","value","Number","isNaN"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,iBAA7B;;AAEA,OAAO,SAASC,YAAT,GAAqC;AAAA;;AACxC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAS,CAAT,CAAhD;AACA,QAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4CP,QAAQ,CAASQ,GAAT,CAA1D;;AAEA,WAASC,uBAAT,CACIC,KADJ,EAEE;AACE,UAAMC,YAAY,GAAGC,QAAQ,CAACF,KAAK,CAACG,MAAN,CAAaC,KAAd,CAA7B;AACAC,IAAAA,MAAM,CAACC,KAAP,CAAaL,YAAb,IACMJ,oBAAoB,CAAC,CAAD,CAD1B,GAEMA,oBAAoB,CAACI,YAAD,CAF1B;AAGH;;AAED,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,oCAAqBP,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,6BACI,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,uBAAtB;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AAAA,uEAEI;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI,QAAC,IAAD,CAAM,OAAN;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,KAAK,EAAEE,iBAFX;AAGI,UAAA,QAAQ,EAAEG;AAHd;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ,eAgBI;AAAA,8BACI,QAAC,MAAD;AACI,QAAA,OAAO,EAAE,MAAMJ,eAAe,CAACD,YAAY,GAAG,CAAhB,CADlC;AAEI,QAAA,QAAQ,EAAEA,YAAY,KAAK,CAAjB,GAAqB,IAArB,GAA4B,KAF1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI,QAAC,MAAD;AACI,QAAA,OAAO,EAAE,MACLC,eAAe,CAACD,YAAY,GAAGE,iBAAhB,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH;;GA/CeH,Y;;KAAAA,Y","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nexport function GiveAttempts(): JSX.Element {\r\n    const [attemptsLeft, setAttemptsLeft] = useState<number>(3);\r\n    const [attemptsRequested, setAttemptsRequested] = useState<number>(NaN);\r\n\r\n    function changeAttemptsRequested(\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ) {\r\n        const numRequested = parseInt(event.target.value);\r\n        Number.isNaN(numRequested)\r\n            ? setAttemptsRequested(0)\r\n            : setAttemptsRequested(numRequested);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Give Attempts</h3>\r\n            <div>Attempts Left: {attemptsLeft}</div>\r\n            <div>\r\n                <Form.Group controlId=\"formAttemptsRequested\">\r\n                    <Form.Label>\r\n                        How Many Attempts Would You Like?\r\n                        <br></br>\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                        type=\"number\"\r\n                        value={attemptsRequested}\r\n                        onChange={changeAttemptsRequested}\r\n                    />\r\n                </Form.Group>\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    onClick={() => setAttemptsLeft(attemptsLeft - 1)}\r\n                    disabled={attemptsLeft === 0 ? true : false}\r\n                >\r\n                    use\r\n                </Button>\r\n                <Button\r\n                    onClick={() =>\r\n                        setAttemptsLeft(attemptsLeft + attemptsRequested)\r\n                    }\r\n                >\r\n                    gain\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}